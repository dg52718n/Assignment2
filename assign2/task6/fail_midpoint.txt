I used the numbers [5] and [2147483647] to fail the midpoint_original test. These numbers failed because [5] is [0b00000000000000000000000000000101] in binary and [2147483647] is [0b01111111111111111111111111111111] in binary so the midpoint of these numbers is expected to be [0b01000000000000000000000000000010]. However, midpoint_original did not calculate the midpoint correctly when it does [x+y] because its result is [0b00000000000000000000000000000101 + 0b01111111111111111111111111111111 = 0b10000000000000000000000000000100]. However, midpoint_A failed for a different reason. I used the numbers [5] and [-2147483647] to fail the midpoint_A test. The test failed because [5] is [0b00000000000000000000000000000101] in binary and [-2147483647] is [0b10000000000000000000000000000001] in binary so the midpoint of these numbers is supposed to be [0b11000000000000000000000000000011]. However, midpoint_A failed when it does [y-x] because the result it gives is [0b00000000000000000000000000000101 - 0b10000000000000000000000000000001 = 0b01111111111111111111111111111100]